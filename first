plot(iris$Sepal.Length,iris$Sepal.Width, pch=19, col=iris$Species )
boxplot(iris$Sepal.Length)

###
head(cars)
#   speed dist
# 1     4    2
# 2     4   10
# 3     7    4
# 4     7   22
# 5     8   16
# 6     9   10

model <- lm(dist~speed, data=cars)

print(cars)

summary(model)
# Call:
# lm(formula = dist ~ speed, data = cars)

# Residuals:
#     Min      1Q  Median      3Q     Max 
# -29.069  -9.525  -2.272   9.215  43.201 

# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)    
# (Intercept) -17.5791     6.7584  -2.601   0.0123 *  
# speed         3.9324     0.4155   9.464 1.49e-12 ***
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

# Residual standard error: 15.38 on 48 degrees of freedom
# Multiple R-squared:  0.6511,   Adjusted R-squared:  0.6438 
# F-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12


###
6 + 10 # [1] 16
x <- 1:9 # [1] 1 2 3 4 5 6 7 8 9
y <- 99 # [1] 99
print(y)

install.packages("ggplot2", dependencies = T) # ggplot2 package 설치

# 산술연산과 주석
2 + 3
(3 + 6) * 8
2^3 # 2의 3제곱
# 일반적으로 한 줄에 하나의 명령어 입력
# 한 줄 내에서 #이후의 내용은 주석으로 간주하여 실행되지 않음

log(10) + 5
sqrt(25)
max(5, 4, 2)
# 수학이나 통계함수 제공
# 함수는 "함수명(매개변수값)"으로 구성

# 변수의 개념
a <- 10
b <- 20
c <- a + b
print(c)
# 변수명만 실행해도 print()함수의 결과와 동일
# 변수명을 선택하고 실행해도 같은 결과

###
log2(2) # [1] 1
25^(1/2) # [1] 5
6 + 10 # [1] 16
'+'(6,8) # [1] 14
ifelse(1 > 2, 'big', 'small') # [1] "small"
max(5,3,2) # [1] 5

# 변수의 값 변경
# 변수에 저장된 값은 변경 가능
# 변수의 자료형은 저장된 데이터의 자료형으로 자동 변경
a <- 10
b <- 20
a + b
a <- "A"
a + b

### 벡터 생성
x <- c(1, 2, 3) # combination
y <- c("a", "b", "c")
z <- c(TRUE, TRUE, FALSE, TRUE)
c('a', 'b', 'c') -> z
z = c(T, T, F, F)
x <- 1:10:10
x #  [1]  1  2  3  4  5  6  7  8  9 10

### 일정한 간격의 숫자로 이루어진 백터 생성
seq(1, 10, 1) #  [1]  1  2  3  4  5  6  7  8  9 10

### 반복된 숫자로 이루어진 벡터 생성
a <- rep(1, times=5)
a # [1] 1 1 1 1 1
rep(c(1,3,5), times=3) # [1] 1 3 5 1 3 5 1 3 5
rep(c(1,3,5), each=3) # [1] 1 1 1 3 3 3 5 5 5

### 벡터의 원소값에 이름 지정
score <- c(90, 80, 70)
# names(score)
names(score) <- c("홍길동", "심지혜", "김삿갓")
score 

# 홍길동 심지혜 김삿갓
#    90     80    70


### 벡터에서 원소값 추출

d <- c(1, 4, 6, 9)
d[1] # [1] 1
d[2] # [1] 4
d[c(1, 3, 4)] # [1] 1 6 9
d[2:3] # [1] 4 6
d[-2] # [1] 1 6 9
d[-c(2,3)] # [1] 1 9

d <- c(1, 4, 6, 9)
d[1] #[1] 1
d[2] #[1] 4
d[c(1, 3, 4)] #[1] 1 6 9
d[2:3] #[1] 4 6
d[-2] #[1] 1 6 9
d[-c(2,3)] #[1] 1 9

### 벡터에서 원소값 변경
a <- c(1, 3, 5, 7)
a # [1] 1 3 5 7
a[2] <- 9
a[c(3, 4)] <- c(10,20)
a # [1]  1  9 10 20

### 벡터의 숫자값 연산
rep(c(1,3,5), each=3) # [1] 1 1 1 3 3 3 5 5 5
x <- c(1, 4, 3, 7, 8)
x # [1] 1 4 3 7 8
x * 2 # [1]  2  8  6 14 16
c(1, 4, 3, 7, 8) * c(2, 2, 2, 2, 2) # [1]  2  8  6 14 16

### 백터에 적용 가능한 함수
x <- 1:10
sum(10) # [1] 10
mean(x[1:5]) # [1] 3
length(x) # [1] 10
sort(x) # [1]  1  2  3  4  5  6  7  8  9 10
sort(x, decreasing = T) # [1] 10  9  8  7  6  5  4  3  2  1

### 벡터에 논리연산자 적용
x <- 1:10
x > 5 # [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
sum(x > 5) # 5보다 큰 x의 값이 몇 개 있는가 [1] 5
x[x > 5] # (x의 값이 5보다 큰 것은?) [1]  6  7  8  9 10

x <- 10:50 # 10~50까지를 만들어 준 후
x[x >= 40] # 40 이상의 숫자만 슬라이싱

x <- c(90, 34, 89, 22)
lst <- list (name = "홍길동", age = 34, status = TRUE, score = x)
lst[1] 
# $name
#[1] "홍길동"
lst[[4]] # [1] 90 34 89 22
lst$age # [1] 34

m <- matrix(1:20, nrow = 4, ncol = 5)
m
# [,1] [,2] [,3] [,4] [,5]
# [1,]    1    5    9   13   17
# [2,]    2    6   10   14   18
# [3,]    3    7   11   15   19
# [4,]    4    8   12   16   20

m <- matrix(1:19, ncol = 5, nrow = 4)
m
# [,1] [,2] [,3] [,4] [,5]
# [1,]    1    5    9   13   17
# [2,]    2    6   10   14   18
# [3,]    3    7   11   15   19
# [4,]    4    8   12   16    1

(m1 <- matrix(1:20, nrow = 4, ncol = 5))
# [,1] [,2] [,3] [,4] [,5]
# [1,]    1    5    9   13   17
# [2,]    2    6   10   14   18
# [3,]    3    7   11   15   19
# [4,]    4    8   12   16   20
(m1 <- matrix(1:20, nrow = 4, ncol = 5, byrow = T))
# [,1] [,2] [,3] [,4] [,5]
# [1,]    1    2    3    4    5
# [2,]    6    7    8    9   10
# [3,]   11   12   13   14   15
# [4,]   16   17   18   19   20

x <- 1:4
y <- 5:8
cbind(x, y)
# x y
# [1,] 1 5
# [2,] 2 6
# [3,] 3 7
# [4,] 4 8
rbind(x, y)
# [,1] [,2] [,3] [,4]
# x    1    2    3    4
# y    5    6    7    8

# 메트릭스에서 값 추출
# 2차원의 인덱스값을 이용하여 매트릭스에서 값 추출하기
# [행, 열]
(x <- matrix(1:20, ncol = 5))
x(2, 3)
x(3, )
x(, 2)

# 메트릭스에서 여러 개의 값 추출
(x <- matrix(1:20, ncol = 5))
x(2, 1:3)
x(1:2, c(1, 2, 4))

#매트릭스의 행과 열에 이름 저장
(x <- matrix(1:4, ncol = 2))
rownames(x) <- c("row1", "row2")
colnames(x) <- c("col1", "col2")
x

# 매트릭스의 행과 열의 이름으로 값 추출
(x <- matrix(1:4, ncol = 2))
rownames(x) <- c("row1", "row2")
colnames(x) <- c("col1", "col2")
x(1, c("col1", "col2"))
rownames(x)[1]

# 데이터프레임 개념
# 수자형 벡터, 문자형 벡터 등 서로 다른 형태의 데이터를 2차원의 형태로 표현하는 자료구조
# 모양은 매트릭스와 차이가 없지만 동일한 자료형이 아닌 열단위로 다른 자료형을 저장할 수 있어
# 데이터 분석에서 활용도가 높음

# 데이터 프레임 만들기
city <- c("seoul", "washington", "hongkong")
ranking <- c(1, 3, 2)
df <- data.frame(city, ranking)
str(df)
# 'data.frame':	3 obs. of  2 variables:
# $ city   : chr  "seoul" "washington" "hongkong"
# $ ranking: num  1 3 2
head(iris)
# Sepal.Length Sepal.Width Petal.Length Petal.Width Species
# 1          5.1         3.5          1.4         0.2  setosa
# 2          4.9         3.0          1.4         0.2  setosa
# 3          4.7         3.2          1.3         0.2  setosa
# 4          4.6         3.1          1.5         0.2  setosa
# 5          5.0         3.6          1.4         0.2  setosa
# 6          5.4         3.9          1.7         0.4  setosa
tail(iris, 3)
# Sepal.Length Sepal.Width Petal.Length Petal.Width   Species
# 148          6.5         3.0          5.2         2.0 virginica
# 149          6.2         3.4          5.4         2.3 virginica
# 150          5.9         3.0          5.1         1.8 virginica
df <- data.frame(city, ranking, stringsAsFactors = F)
str(df)
# 'data.frame':	3 obs. of  2 variables:
# $ city   : chr  "seoul" "washington" "hongkong"
# $ ranking: num  1 3 2
sd(iris$Sepal.Length)
# [1] 0.8280661

# iris 데이터프레임
# 150개의 붓꽃의 꽃받침과 꽃잎의 크기(길이, 폭)를 측정한 데이터셋
head(iris)
str(iris)
# 'data.frame':	150 obs. of  5 variables:
# $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
# $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
# $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
# $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
# $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...

iris[, c(1, 2)]
# Sepal.Length Sepal.Width
# 1            5.1         3.5
# 2            4.9         3.0
# 3            4.7         3.2
# 4            4.6         3.1
# 5            5.0         3.6
#6            5.4         3.9
# 7            4.6         3.4
# 8            5.0         3.4
# 9            4.4         2.9
# 10           4.9         3.1
# 11           5.4         3.7
# 12           4.8         3.4
# 13           4.8         3.0
# 14           4.3         3.0
# 15           5.8         4.0
# 16           5.7         4.4
# 17           5.4         3.9
# 18           5.1         3.5
# 19           5.7         3.8
# 20           5.1         3.8
# 21           5.4         3.4
# 22           5.1         3.7
# 23           4.6         3.6
# 24           5.1         3.3
# 25           4.8         3.4
# 26           5.0         3.0
# 27           5.0         3.4
# 28           5.2         3.5
# 29           5.2         3.4
# 30           4.7         3.2
# 31           4.8         3.1
# 32           5.4         3.4
# 33           5.2         4.1
# 34           5.5         4.2
# 35           4.9         3.1
# 36           5.0         3.2
# 37           5.5         3.5
# 38           4.9         3.6
# 39           4.4         3.0
# 40           5.1         3.4
# 41           5.0         3.5
# 42           4.5         2.3
# 43           4.4         3.2
# 44           5.0         3.5
# 45           5.1         3.8
# 46           4.8         3.0
# 47           5.1         3.8
# 48           4.6         3.2
# 49           5.3         3.7
# 50           5.0         3.3
# 51           7.0         3.2
# 52           6.4         3.2
# 53           6.9         3.1
# 54           5.5         2.3
# 55           6.5         2.8
# 56           5.7         2.8
# 57           6.3         3.3
# 58           4.9         2.4
# 59           6.6         2.9
# 60           5.2         2.7
# 61           5.0         2.0
# 62           5.9         3.0
# 63           6.0         2.2
# 64           6.1         2.9
# 65           5.6         2.9
# 66           6.7         3.1
# 67           5.6         3.0
# 68           5.8         2.7
# 69           6.2         2.2
# 70           5.6         2.5
# 71           5.9         3.2
# 72           6.1         2.8
# 73           6.3         2.5
# 74           6.1         2.8
# 75           6.4         2.9
# 76           6.6         3.0
# 77           6.8         2.8
# 78           6.7         3.0
# 79           6.0         2.9
# 80           5.7         2.6
# 81           5.5         2.4
# 82           5.5         2.4
# 83           5.8         2.7
# 84           6.0         2.7
# 85           5.4         3.0
# 86           6.0         3.4
# 87           6.7         3.1
# 88           6.3         2.3
# 89           5.6         3.0
# 90           5.5         2.5
# 91           5.5         2.6
# 92           6.1         3.0
# 93           5.8         2.6
# 94           5.0         2.3
# 95           5.6         2.7
# 96           5.7         3.0
# 97           5.7         2.9
# 98           6.2         2.9
# 99           5.1         2.5
# 100          5.7         2.8
# 101          6.3         3.3
# 102          5.8         2.7
# 103          7.1         3.0
# 104          6.3         2.9
# 105          6.5         3.0
# 106          7.6         3.0
# 107          4.9         2.5
# 108          7.3         2.9
# 109          6.7         2.5
# 110          7.2         3.6
# 111          6.5         3.2
# 112          6.4         2.7
# 113          6.8         3.0
# 114          5.7         2.5
# 115          5.8         2.8
# 116          6.4         3.2
# 117          6.5         3.0
# 118          7.7         3.8
# 119          7.7         2.6
# 120          6.0         2.2
# 121          6.9         3.2
# 122          5.6         2.8
# 123          7.7         2.8
# 124          6.3         2.7
# 125          6.7         3.3
# 126          7.2         3.2
# 127          6.2         2.8
# 128          6.1         3.0
# 129          6.4         2.8
# 130          7.2         3.0
# 131          7.4         2.8
# 132          7.9         3.8
# 133          6.4         2.8
# 134          6.3         2.8
# 135          6.1         2.6
# 136          7.7         3.0
# 137          6.3         3.4
# 138          6.4         3.1
# 139          6.0         3.0
# 140          6.9         3.1
# 141          6.7         3.1
# 142          6.9         3.1
# 143          5.8         2.7
# 144          6.8         3.2
# 145          6.7         3.3
# 146          6.7         3.0
# 147          6.3         2.5
# 148          6.5         3.0
# 149          6.2         3.4
# 150          5.9         3.0
iris[2:3, c("Sepal.Width", "Sepal.Length")]
# Sepal.Width Sepal.Length
# 2         3.0          4.9
# 3         3.2          4.7
iris[1:2, -5]
# Sepal.Length Sepal.Width Petal.Length Petal.Width
# 1          5.1         3.5          1.4         0.2
# 2          4.9         3.0          1.4         0.2

iris[iris$Sepal.Length<5,] # Length가 5보다 작거나 같은 것을 출력하는 것
# Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
# 2            4.9         3.0          1.4         0.2     setosa
# 3            4.7         3.2          1.3         0.2     setosa
# 4            4.6         3.1          1.5         0.2     setosa
# 7            4.6         3.4          1.4         0.3     setosa
# 9            4.4         2.9          1.4         0.2     setosa
# 10           4.9         3.1          1.5         0.1     setosa
# 12           4.8         3.4          1.6         0.2     setosa
# 13           4.8         3.0          1.4         0.1     setosa
# 14           4.3         3.0          1.1         0.1     setosa
# 23           4.6         3.6          1.0         0.2     setosa
# 25           4.8         3.4          1.9         0.2     setosa
# 30           4.7         3.2          1.6         0.2     setosa
# 31           4.8         3.1          1.6         0.2     setosa
# 35           4.9         3.1          1.5         0.2     setosa
# 38           4.9         3.6          1.4         0.1     setosa
# 39           4.4         3.0          1.3         0.2     setosa
# 42           4.5         2.3          1.3         0.3     setosa
# 43           4.4         3.2          1.3         0.2     setosa
# 46           4.8         3.0          1.4         0.3     setosa
# 48           4.6         3.2          1.4         0.2     setosa
# 58           4.9         2.4          3.3         1.0 versicolor
# 107          4.9         2.5          4.5         1.7  virginica