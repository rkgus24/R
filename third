# 선그래프의 작성
# 지각생의 자료
# month 1 2 3 4 5 6 7 8 9 10 11 12
# late 5 8 7 9 4 6 12 13 8 6 6 4

month <- 1:12
late <- c(5, 8, 7, 9, 4, 6, 12, 13, 8, 6, 6, 4)
length(late) # [1] 12
plot(x = month, y = late, type = 'l', lty = 'solid', lwd = 2, col = 'blue')

##################### 복수의 선그래프의 작성
month <- 1:12
late1 <- c(5, 8, 7, 9, 4, 6, 12, 13, 8, 6, 6, 4)
late2 <- c(4, 6, 5, 8, 7, 8, 10, 11, 6, 5, 7, 3)
?plot(x = month, y = late1, type = 'l', lty = 'dashed', lwd = 5, col = 'orange', ylim = c(0, 20))
lines(x = month, y = late2, lty = 'solid', col = 'blue', lwd = 5)

morning = rnorm(100000, mean = 6, sd = 1)
length(morning) # [1] 100000
hist(morning)
head(iris)
# Sepal.Length Sepal.Width Petal.Length Petal.Width Species
# 1          5.1         3.5          1.4         0.2  setosa
# 2          4.9         3.0          1.4         0.2  setosa
# 3          4.7         3.2          1.3         0.2  setosa
# 4          4.6         3.1          1.5         0.2  setosa
# 5          5.0         3.6          1.4         0.2  setosa
# 6          5.4         3.9          1.7         0.4  setosa
dim(iris)
# 70%만 가져오고 싶을 때
idx <- sample(1:NROW(iris), NROW(iris)*0.7, replace=F) # NROW : 정확히 행의 개수만 가져옴
idx
iris[idx,]
iris[-idx,]

install.packages("neuralnet", dependencies = T)
library(neuralnet)

library(neuralnet)
library(keras)
library(pytorch)
head(infert)
# education age parity induced case spontaneous stratum pooled.stratum
# 1    0-5yrs  26      6       1    1           2       1              3
# 2    0-5yrs  42      1       1    1           0       2              1
# 3    0-5yrs  39      6       2    1           0       3              4
# 4    0-5yrs  34      4       2    1           0       4              2
# 5   6-11yrs  35      3       1    1           1       5             32
# 6   6-11yrs  36      4       2    1           1       6             36
df <- infert[, 2:6]
table(df$case)
# 0   1
# 165  83
model <- neuralnet(case~., data = df, hidden = c(2, 3))
model
plot(model)
compute(model, df[1,])